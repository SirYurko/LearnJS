mocha.setup('bdd');
const assert = chai.assert;

mocha.run();

describe('Тестування t01', ()=>{
    it('Перевіряємо що функція повертає 42.', ()=>{
        assert.equal(t01(), "42", 'Функція повернула друге значення') // не строгий тест
    });
    it('Перевіряємо що функція повертає Число 42.', ()=>{ 
        assert.strictEqual(t01(), 42)                         // строгий тест
    });
})

describe("Тестування t02", function(){
    it("Перевіряє чи функція повернула більше число 100", ()=>{
        // >
        assert.isAbove(t02(), 100);
    })
})

describe("Тестування t03", function(){
    it("Перевіряє чи функція повернула менше число 100", ()=>{
        // <
        assert.isBelow(t03(), 100, "Число більше 100 або не є числом");  // повертає помилку оскільки в коді число більше 100
    })
})

describe("Тестування t04", function(){
    it("Перевіряє чи функція повернула число не рівне 5", ()=>{
        // !=
        assert.notEqual(t04(), 5);  
    })
})

describe("Тестування t05", function(){
    it("Перевіряє чи функція повернула рядок", ()=>{
        // ""
        assert.isString(t05());
        // isNotString()
        // isNumber(), isNotNumber()
        // isArray(), isNotArray()
        // inFunction , isNotFunction()
        // isTrue , is False 
    });
})

describe("Тестування t06", ()=>{
    it('Перевіряєм, чи функція повертає масив який містить 66', ()=>{
        assert.include(t06(), 66)
    })
})

describe("Тестування t06", ()=>{
    it('Перевіряєм, чи функція повертає масив', ()=>{
        assert.isArray(t06(), 66)
    })
})

describe("Тестування t07", ()=>{
    it('Перевіряєм, чи функція повертає масив довжиною 2', ()=>{
        assert.lengthOf(t07(), 2, "Довжина масива не дорівню 2") // повертає помилку оскільки довжина масиву 3 а не 2
    })
})

describe("Тестування t08", ()=>{
    it("Перевіряєм, чи функція повертає об'єкт з властивістю foo рівним bar", ()=>{
        assert.include(t08(), {foo : 'bar'}); // include перевіряє чи МІСТИТЬ певне значення 
    })
})

describe("Тестування t09", ()=>{
    it("Перевіряєм, чи функція повертає функція яка повертає масив з числами 33, 44, 55 в довільному порядку", ()=>{
        assert.sameMembers(t09(), [33, 44, 55]); // перевіряє чи в масиві знаходять ці самі значення, а порядок значень не є важливим
    })
})

describe("Тестування t10", ()=>{
    it("Перевіряєм, чи функція повертає функція яка повертає масив з числами 33, 44, 55 в строгому порядку", ()=>{
        const trueArray = [33, 44, 55]; // вивели масив для перевірки в константу (не є обов'язково але рахується як хороший тон)
        assert.sameOrderedMembers(t10(), trueArray); // перевіряє чи в масиві знаходять ці самі значення в строгому порядку
    })
})

// isAtMost <=
// isAtLeast >=