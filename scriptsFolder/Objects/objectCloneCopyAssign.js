/**
 * Поверхневе клонування об'єктів
 * 
 * Копіює всі властивості з об'єкта-джерела в новий об'єкт.
 * 
 * @param {object} user об'єкт джерело нашої копії
 * @returns {object} clone новий об'єкт який містить властивості з оригіналу 
 * 
 */
// let user = {
//     name: "Микола",
//     age: 30
// };

// let clone = {}; // новий порожній об'єкт

// копіюємо в новий об'єкт всі властивості з user
// for (let key in user){
//     clone[key] = user[key];
// }

// тепер clone є повністю незалежним об'єктом з тим самим вмістом
// clone.name = "Петро";

// console.log( user.name ); // значення "Микола" все ще в оригінальному об'єкті

//-----------------------------------------------------------------------------

/**  Метод Object.assign() використовується для копіювання значень усіх власних перерахованих
 властивостей з одного або більше вихідних об’єктів у цільовий об’єкт. Після копіювання він повертає цільовий об'єкт.

 Синтаксис
    Object.assign(dest, ...sources)

    Перший аргумент dest є цільовим об’єктом.
    Подальші аргументи – це список вихідних об’єктів.
    Він копіює властивості всіх вихідних об’єктів у цільовий dest, а потім повертає його як результат.
*/

//-------------------------------------------------------------

// let user = {
//     name: "Микола",
// };

// let permissions1 = {
//     canView: true,
// };

// let permissions2 = {
//     canEdit: true,
// }

// копіює всі властивості з permissions1 та permissions2 в user
// Object.assign(user, permissions1, permissions2);

// Тепер user = { name: "Микола", canView: true, canEdit: true }
// console.log(user.name)
// console.log(user.canView)
// console.log(user.canEdit)

// Якщо скопійована назва властивості вже існує, вона буде перезаписана:

// let person = { name: "Микола"}

// Object.assign(person, {name: "Петро"});

// console.log(person.name)

